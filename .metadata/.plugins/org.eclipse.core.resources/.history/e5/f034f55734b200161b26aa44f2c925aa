package algorithm.dataStructure.case2;

public class TestJosephus {

	public static void main(String[] args) {
		
		Dlink curr = new Dlink();

		int n = 8;
		int m = 4;
		
		
		for(int i = n ; i > 0; i--){
			curr.addAfter(i);
		}
		
		/*for(int i = n ; i > 0; i--){
			for(int j = 0; j < m ; j++){
				if(node != null && node.befour() != null){
					node = node.befour();
					System.out.println(curr2.findNode(node));

				}else if(node == null){
					
					node = curr.tail;
					System.out.println(curr2.findNode(node));
					
					
					
				}else if(node.befour() == null){
					node.setBefour(curr.tail);
					System.out.println(curr2.findNode(node));
					node = node.befour();
				}
				
		}*/
		Node node = curr.tail;
		//System.out.println(curr.count);
		int size = curr.count;
		while(size > 1){
			
			for(int j = 0 ; j < m ; j++){
				if(node != null && node.befour() != null){
					System.out.println(node.data());
					node = node.befour();
				}else if(node.befour() == null){
					node = curr.tail;
				}
			}
			
			if(node != null && node.befour() != null){
				curr.delNode(node.data());
				
				size--;
			}else if(node.befour() == null){
				curr.delNode(node.data());
				node = curr.tail;
				size--;
			}

			
			
		}
			curr.displayAll();

				
				
		}
		
		

		

		


	}


